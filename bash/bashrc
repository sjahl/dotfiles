# General Stuff

shopt -s checkwinsize
shopt -s cdspell
shopt -s dotglob
shopt -s histappend

if [[ -f ~/bin/kube-context.sh ]]; then
    source ~/bin/kube-context.sh
fi

# PS1s
NORMAL="\[\033[00m\]"
BLUE="\[\033[01;34m\]"
YELLOW="\[\e[1;33m\]"
GREEN="\[\e[1;32m\]"
GREY="\[\\033[38;5;95;38;5;240m\]"

# generic redhat prompt
#export PS1="[\u@\h \w]\$ "

export PS1="${GREY}[\D{%T}] ${BLUE}\W${GREEN}\$(__git_ps1 \" (%s)\") ${NORMAL}${GREY}\$(__kube_ps1)\n${YELLOW}\$${NORMAL} "

# my old prompts
# export PS1='[\D{%T}][\u:\[\e[31m\]\W\[\e[m\]]$(__git_ps1 " (%s)")\n\[\e[1;33m\] \$\[\e[0m\] \[\e[m\]'
# export PS1='\[\e[1m\][\h:\W]$(__git_ps1 " (%s)")\$\[\e[0m\] \[\e[m\]'
# export PS1='\[\e[1m\]\u@\h\[\e[m\] \[\e[1m\]\w \[\e[1;33m\]\$\[\e[m\] '
# export PS1='\[\e[1;31m\]\h\[\e[0m\]:\[\e[1;34m\]\w \[\e[0m\]\[\e[1;31m\]\u\[\e[0m\]\$ '
# export PS1='\[\e[1m\][\u@\h \w]\$\[\e[0m\] \[\e[m\]'
# export PS1='\[\e[1;4m\]\u@\h\[\e[m\] \[\e[1m\]\w\n\$\[\e[m\] '

CLICOLOR=1
PAGER=less
LSCOLORS='ExGxFxdxCxDxDxBxBxExEx'
[[ $TMUX = "" ]] && export TERM="xterm-256color"

export PYENV_VIRTUALENV_DISABLE_PROMPT=1

HISTCONTROL=ignoredups:ignorespace
HISTIGNORE="&:ls:[bf]g:exit"
HISTORY=5000
HISTTIMEFORMAT="%F %T "
LANG=en_US.utf-8
LANGUAGE=en_US.utf-8
LC_ALL=en_US.utf-8
LC_COLLATE=C
LC_CTYPE=en_US.utf-8
PYTHONIOENCODING=utf-8


# Aliases
alias ll='ls -al'
alias sl='ls'
alias cdd='cd'
alias xs='cd'
alias cim='vim'
alias vi='vim'
alias psc='ps xawf -eo pid,user,cgroup,args'
alias srd='screen -rd'
alias sr='screen -r'
alias xl='i3lock -n -c 333333'
alias ta='tmux a'
alias shs='ssh'
alias ri='ri -T'
alias tmux="TERM=screen-256color-bce tmux"
alias password='openssl rand -base64 14'
alias sprunge='curl -F "sprunge=<-" http://sprunge.us'
alias pgrep='pgrep -alf'
alias cg='cd `git rev-parse --show-toplevel`'
alias timevmstat="vmstat -S M 3 | awk '{now=strftime(\"%Y-%m-%d %T \"); print now $0}'"

# only apply certain annoying platform specific stuff on the right platforms.
case ${OSTYPE} in
# Linux returns strings like: linux-gnu, linux
    linux*)
      alias       ls='ls --color=always'
      if [ -f /etc/bash_completion ]; then
          . /etc/bash_completion
      fi
      if [ -d "$HOME/bin" ] ; then
              PATH="$HOME/bin:$HOME/.rbenv/bin:$PATH"
      fi

        ;;

# MacOS X returns strings like: darwin
    darwin*)
    alias ls="ls -GF"
    # Bash completion
    if [ -f `brew --prefix`/etc/bash_completion ]; then
        . `brew --prefix`/etc/bash_completion
    fi
        ;;
esac

complete -C aws_completer aws

export AWS_PROFILE=default
export AWS_DEFAULT_PROFILE=default

# various aws functions
awsenv ()
{
    environment=$1;
    if [[ -z $environment ]]; then
        env | grep --color=auto AWS;
    else
        if [[ $environment == 'clear' ]]; then
            unset AWS_PROFILE;
            unset AWS_DEFAULT_PROFILE;
        else
            export AWS_PROFILE=$environment;
            export AWS_DEFAULT_PROFILE=$environment;
            env | grep --color=auto AWS;
        fi;
    fi
}

watchec2 ()
{
    if [[ -z $1 ]]; then
        echo "Usage: watchec2 <fqdn>";
    else
        watch -n 3 nc -vz $1 22;
    fi
}

export VAULT_TOKENS_PATH=~/Private/vault/tokens
vault_env ()
{
    environment=$1;
    if [[ -z $environment ]]; then
        if [[ -n $VAULT_ADDR || -n $VAULT_TOKEN ]]; then
            echo $VAULT_ADDR;
            [[ -n $VAULT_TOKEN ]] && echo "VAULT_TOKEN is set.";
        else
            echo "Vault is not configured in your environment";
        fi;
    else
        if [[ $environment == 'clear' ]]; then
            unset VAULT_ADDR;
            unset VAULT_TOKEN;
            echo "unset VAULT_ADDR and VAULT_TOKEN";
        else
            export VAULT_ADDR=https://consul.$environment.int.dynoquant.com:8200;
            VAULT_TOKEN_FILE="${VAULT_TOKENS_PATH}/.vault-token.$environment";
            export VAULT_TOKEN=$(cat ${VAULT_TOKEN_FILE});
            echo "VAULT_ADDR: $VAULT_ADDR";
            echo "VAULT_TOKEN: (see ${VAULT_TOKEN_FILE})";
        fi;
    fi
}

vault_cp () 
{ 
    old_namespace=$1;
    new_namespace=$2;
    value=$(vault read -field=value "$1");
    if [[ -z "$value" ]]; then
        echo "$value did not have a 'value' field";
        return 1;
    fi;
    vault write "$2" value="$value"
}

if [ -f ~/git/quantopian/orchestration/etc/shell_include.sh ]; then
    . ~/git/quantopian/orchestration/etc/shell_include.sh
fi

if [ -d /Users/sjahl/go ]; then
    export GOPATH=/Users/sjahl/go
    export PATH=${PATH}:$GOPATH/bin
fi

complete -C /usr/local/bin/vault vault

